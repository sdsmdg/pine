#! /usr/bin/env bash

# Global constants
PINE_VERSION=1.0.0
FILE_NOT_FOUND_EX=2
LOG_FILE=/tmp/pine_logs/log.txt
SRC_PATH=""
SCRIPT_PATH=""
GITIGNORE_REPO="https://github.com/github/gitignore.git"
# Global variables
declare -A map # map for easy searching of names


# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
# From: https://stackoverflow.com/a/38153758/6556360
# parse the arguments.
parse_params ()
{
    local existing_named
    local ARGV=()
    echo "local ARGV=(); "
    while [[ "$1" != "" ]]; do
        # If equals delimited named parameter
        if [[ "$1" =~ ^..*=..* ]]; then
            # key is part before first =
            local _key=$(echo "$1" | cut -d = -f 1)
            # val is everything after key and = (protect from param==value error)
            local _val="${1/$_key=}"
            # remove dashes from key name
            _key=${_key//\-}
            # search for existing parameter name
            if (echo "$existing_named" | grep "\b$_key\b" >/dev/null); then
                # if name already exists then it's a multi-value named parameter
                # re-declare it as an array if needed
                if ! (declare -p _key 2> /dev/null | grep -q 'declare \-a'); then
                    echo "$_key=(\"\$$_key\");"
                fi
                # append new value
                echo "$_key+=('$_val');"
            else
                # single-value named parameter
                echo "local $_key=\"$_val\";"
                existing_named=" $_key"
            fi
            # If standalone named parameter
        elif [[ "$1" =~ ^\-. ]]; then
            # remove dashes
            local _key=${1//\-}
            echo "local $_key=\"$_key\";"
            # non-named parameter
        else
            # escape asterisk to prevent bash asterisk expansion
            _escaped=${1/\*/\'\"*\"\'}
            echo "ARGV+=('$_escaped');"
        fi
        shift
    done
}
# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~

# Updates all gitignore files in ${SCRIPTPATH}/gitignore
function update_config_files() {
    echo -e "Updating local configuration files...\n"
    if [[ -d ${SCRIPTPATH}/gitignore/.git ]]; then
	git -C "${SCRIPTPATH}/gitignore" pull origin master -ff && {

	    for f in ${SCRIPTPATH}/gitignore/*; do
		filename=$(basename "$f")
		newpath="${SCRIPTPATH}/gitignore/${filename,,}"
		# Use output redirection to prevent warning when content of repo is not changed
		mv "$f" "$newpath" &> /dev/null 
	    done

	    # Fix symlinks if any
	    for f in $(find ${SCRIPTPATH}/gitignore/. -type l); do
		originalLink=$(readlink $f)
		ln -sfT ${originalLink,,} ${f}
	    done
	} || {
	    echo "FATAL ERROR: Cloning failed"
	    exit
	}
    else
	echo "WARNING: Cannot find local .gitignore repository, clonning..."
	git clone "$GITIGNORE_REPO" "${SCRIPTPATH}/gitignore" && {
	    update_config_files
	} || {
	    echo "FATAL ERROR: Cloning failed"
	    exit
	}
    fi
}

# Checks if config files exists, if not download them
function check_and_update_config_files() {
    if [[ ! -d  ${SCRIPTPATH}/gitignore/.git ]]; then
	update_config_files
    fi
}

# Compile names to a list
function compile_names() {
    for gitignoreFile in ${SCRIPTPATH}/gitignore/*.gitignore; do
	filename=$(basename "$gitignoreFile") # remove path
	configName="${filename%.*}" # remove extension
	configName="${configName,,}" # to lowercase
 	name="$name $configName" # append to name list
    done
    echo "$name" > ${SCRIPTPATH}/names.list
}

function load_names() {
    if [ -f ${SCRIPTPATH}/names.list ]; then
	storedNames=`cat ${SCRIPTPATH}/names.list` > $LOG_FILE || throw $FILE_NOT_FOUND_EX  # Read compiled list
    else
	echo "WARNING: Names list not compiled"
	echo "use 'pine --help'"
	echo "INFO: Compiling names list"

	compile_names && echo "Names list compiled"
	load_names

	return
    fi
    
    # Compile names for map
    nameArr=($storedNames)
    for name in "${nameArr[@]}"; do
	map[$name]=1
    done
}

function search_name_in_list() {
    # Returns 1 if name passed is in compiled map
    if [ ${map["$1"]+_} ]; then
	return 0
    else
	return 1
    fi
}

print_version() {
    echo -e "Version: $PINE_VERSION"
}

function print_help() {
    echo "Pine : gitignore manager"
    print_version
    cat "${SCRIPTPATH}/HELP.txt"
}

# Check if config for $1 exist in .gitignore file
function check_for_existing_name {
    local gitignoreFile="${SRC_PATH}/.gitignore"
    currentcontent=$(<$gitignoreFile)

    echo "$currentcontent" | awk -v a="$1" -f ${SCRIPTPATH}/utilities/checkconfig.awk && {
	return 1
    } || {
	return 0
    }
}

# Adds config for $1 to gitignore file if it doesn't exist
function add_config_to_file() {
    check_for_existing_name $1 && {
	echo "ERROR: Configuration exists, skipping"
    } || {
	echo "Adding configuration for $arg"
	echo -e "#### ${1} ##########################" >> ${SRC_PATH}/.gitignore
	echo -e "#### DO NOT DELETE PRECEDING LINE" >> ${SRC_PATH}/.gitignore
	echo -e "#### PINE" >> ${SRC_PATH}/.gitignore
	cat "${SCRIPTPATH}/gitignore/${1}.gitignore" >> ${SRC_PATH}/.gitignore
	echo -e "#### DO NOT DELETE THIS LINE" >> ${SRC_PATH}/.gitignore
    }
}

# Prints all the config of the file 
function list_all_config() {
    echo "Following configurations found:"
    if [ ! -f "${SRC_PATH}/.gitignore" ]; then
	echo "ERROR: No .gitignore file found in current directory, Exiting"
    else
	cat "${SRC_PATH}/.gitignore" | awk -f ${SCRIPTPATH}/utilities/listallconfig.awk 
    fi
}

# Removes config for $1 from gitignore file  
function remove_config_from_file() {
    echo "Removing configuration for $arg"
    
    local gitignoreFile=${SRC_PATH}/.gitignore
    currentcontent=$(<$gitignoreFile)

    echo "$currentcontent" | awk -v a="$1" -f ${SCRIPTPATH}/utilities/remove.awk > ${SRC_PATH}/.gitignore
}

function init() {
    set -e
    SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"
    SRC_PATH="$PWD"

    # Checks the presence of config files
    check_and_update_config_files
    
    # Create a gitignore file, if it doesn't exists
    if [ ! -f ./.gitignore ]; then
	echo "INFO: Creating .gitignore file"
	touch ".gitignore"
    fi

    # Make directory for logs
    if [ ! -d /tmp/pine_logs ]; then
	mkdir -p /tmp/pine_logs
    fi
    
    # Load error.sh or display error and exit
    source "${SCRIPTPATH}/inc/error.sh" 
    
    load_names
    eval $(parse_params "$@") # Parse parameters

    # If any parameter is help, print help and exit
    if [[ $help ]]; then
	print_help
	exit
    fi


    # If any parameter is version, print version and exit
    if [ $version ] || [ $v ]; then
	print_version
	exit
    fi


    # If any parameter is update, update and exit
    if [ $update ] || [ $u ]; then
	update_config_files
	exit
    fi

    
    # If any parameter is for listing configs, list and exit
    if [ $list ]; then
	list_all_config 
	exit
    fi

    
    
    # Search each parameter
    for arg in "${ARGV[@]}"; do
	if [ $remove ] || [ $r ]; then
	    remove_config_from_file $arg
	else
	    search_name_in_list $arg && { # Return 1
		add_config_to_file $arg
	    } || { # Return 0
		echo "WARNING: configuration file for $arg not found"
	    }
	fi
    done
}

# Initialise script
init  "$@"
